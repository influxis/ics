<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				width="100%" height="100%" applicationComplete="onCreationComplete()"
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:rtc="http://ns.adobe.com/rtc">
	<fx:Script>
		<![CDATA[
			import com.adobe.rtc.clientManagers.MicrophoneManager;
			import com.adobe.rtc.collaboration.ScreenSharePublisher;
			import com.adobe.rtc.events.AddInLauncherEvent;
			import com.adobe.rtc.events.ScreenShareEvent;
			import com.adobe.rtc.events.SessionEvent;
			import com.adobe.rtc.events.StreamEvent;
			import com.adobe.rtc.events.UserEvent;
			import com.adobe.rtc.sharedManagers.StreamManager;
			import com.adobe.rtc.sharedManagers.UserManager;
			import com.adobe.rtc.sharedManagers.descriptors.UserDescriptor;
			import com.influxis.rtc.ui.controls.ScreenShareControl;
			import com.influxis.views.SettingsView;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			
			import spark.events.PopUpEvent;
			
			import org.osmf.events.TimeEvent;
			protected var _sspublisher:ScreenSharePublisher;
			
			
			public var ssControl:ScreenShareControl;
			
			protected function onAuthSuccess():void
			{
				//init screen share control 
				this.ssControl = new ScreenShareControl();
				
				loginWindow.visible = false;
			}
			
			
			public function init():void
			{
				//launch it from actionscript
				_sspublisher = new ScreenSharePublisher();
				addElement(_sspublisher);
				_sspublisher.publish();
				trace("streamManager: " + cSession.streamManager.sharedID); } 
			
			[Bindable] public static var DEFAULT_CONFIGURATION:String = "default";
			[Bindable] public static var HUB_SPOKE_CONFIGURATION:String = "hub-spoke";
			[Bindable] public static var MULTICAST_CONFIGURATION:String = "multicast";
			
			private var rtmfpTimer:Timer = null;
			private var netConnection:NetConnection = null;
			private const ConnectionTimeout:int = 5000;
			
			import com.adobe.rtc.collaboration.WebcamSubscriber;
			import com.adobe.rtc.events.SessionEvent;
			import com.adobe.rtc.sharedManagers.UserManager;
			
			public var audPub:Boolean = false;
			public var webCam:Boolean = false;
			
			private const applicationTitle:String = "ICS Sample Application Simple Screen Share "
			
			import com.adobe.rtc.events.AddInLauncherEvent;
			import com.adobe.rtc.events.StreamEvent; import com.adobe.rtc.sharedManagers.descriptors.UserDescriptor;
			/* import com.adobe.rtc.collaboration.ScreenSharePublisher;
			protected var _sspublisher:ScreenSharePublisher;
			public function init():void
			{
			/* launch it from actionscript
			_sspublisher = new ScreenSharePublisher(); addChild(_sspublisher);
			_sspublisher.publish();
			//trace("streamManager: " + cSession.streamManager.sharedID); } */
			private function startSS():void
			{
				if(sspublisher != null && !sspublisher.isPublishing) {
					sspublisher.addEventListener(StreamEvent.STREAM_RECEIVE, onStreamReceived);
					sspublisher.addEventListener(AddInLauncherEvent.STOP, onAddinStop);
					sspublisher.addEventListener(StreamEvent.STREAM_DELETE, onStreamDelete);
					sspublisher.publish();
					startss_bt.enabled = false;
					stopss_bt.enabled = true;
					pause_bt.enabled = true;
					pause_bt.label = "Pause Screen Sharing";
				}
			}
			private function stopSS():void
			{
				if(sspublisher != null && sspublisher.isPublishing) { sspublisher.stop(publisherid.text);
					startss_bt.enabled = true;
					stopss_bt.enabled = false;
					pause_bt.enabled = false;
					publisherid.text = "";
					streamid.text = "";
				}
			}
			// addin cancelled
			private function onAddinStop(p_evt:AddInLauncherEvent):void{
				startss_bt.enabled = true;
				stopss_bt.enabled = false;
				pause_bt.enabled = false;
				publisherid.text = "";
				streamid.text = "";
			}
			private function pauseSS():void
			{
				if(sspublisher != null && sspublisher.isPublishing) { if(pause_bt.label == "Pause Screen Sharing") { sspublisher.pause(true); pause_bt.label = "Resume Screen Sharing"; } else{ sspublisher.pause(false); pause_bt.label = "Pause Screen Sharing"; } } }
			private function onStreamDelete(p_evt:StreamEvent):void
			{
				if(p_evt.streamDescriptor.streamPublisherID == publisherid.text && sspublisher.isPublishing) { sspublisher.stop(p_evt.streamDescriptor.streamPublisherID);
					startss_bt.enabled = true;
					stopss_bt.enabled = false;
					pause_bt.enabled = false;
				}
			}
			private function onStreamReceived(p_evt:StreamEvent):void
			{
				var publisherDescriptor:UserDescriptor = null;
				if(p_evt.streamDescriptor.originalScreenPublisher != null)
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.originalScreenPublisher);
				else
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.streamPublisherID);
				var myDescriptor:UserDescriptor = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID) ;
				if ( publisherDescriptor != null ) {
					if(publisherDescriptor.displayName == myDescriptor.displayName ||
						publisherDescriptor.userID.indexOf(myDescriptor.userID) >= 0){ publisherid.text = p_evt.streamDescriptor.originalScreenPublisher;
						streamid.text = p_evt.streamDescriptor.id;
					}
				}
			}
			

		
			//log  in stuff
			private function onCreationComplete():void
			{
				popup(loginWindow);
				cSession.addEventListener(SessionEvent.SYNCHRONIZATION_CHANGE, onEventNotification);
			}
			private function popup(window:IFlexDisplayObject):void
			{
				PopUpManager.addPopUp(window, this, true);
				PopUpManager.centerPopUp(window);
				window.visible = true;
			}
			
			/**
			 * Process LCCS Events
			 */
			private function onEventNotification(p_event:Event):void
			{
				if (p_event.type == SessionEvent.SYNCHRONIZATION_CHANGE) {
					if (cSession.isSynchronized) {
						panel.title = "Connected to room " + cSession.roomURL;
						PopUpManager.removePopUp(loginWindow);
						if ( cSession.userManager.myUserRole == 100 ) {
							cSession.roomManager.autoPromote = true ;
						}
					}
				}
			}
			private function listLabelFunction(p_object:Object):String
			{
				var roleString:String ;
				
				
				if ( p_object is String ) {
					return p_object as String;
				}
				
				if ( p_object.role == 10 ) {
					roleString = "Viewer" ;
				}else if ( p_object.role == 50 ) {
					roleString = "Publisher" ;
				}else if (p_object.role == 100 ) {
					roleString = "Owner" ;
				}
				if ( p_object.userID == cSession.userManager.myUserID ) {
					return "*" + p_object.displayName + " : " + roleString ;
				}
				return p_object.displayName + " : " + roleString ;
			}
			
			private function login():void
			{
				
				auth.userName = username.text;
				auth.password = passwordBox.visible ? password.text : null;
				cSession.roomURL = roomURL.text;	
				cSession.login();
			}
			
			
			
			
		]]>
	</fx:Script>
	
	
	<!--
	| Login Dialog Box
	-->
	<mx:TitleWindow id="loginWindow" title="Connect to Room" visible="false">
		<mx:VBox>
			<mx:HBox>
				<mx:Label text="Room URL:" width="70"/>
				<mx:TextInput id="roomURL" width="295" tabIndex="1">
					<mx:text>Your RoomUrl</mx:text>
				</mx:TextInput>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Username:" width="70"/>
				<mx:TextInput id="username" tabIndex="2">
					<mx:text>Your Username</mx:text>
				</mx:TextInput>	
				<mx:Button label="Login" click="login()" width="126" tabIndex="4"/>
			</mx:HBox>
			<mx:HBox>
				<mx:HBox id="passwordBox">
					<mx:Label text="Password:" width="70"/>
					<mx:TextInput id="password" displayAsPassword="true" tabIndex="3">
						<mx:text>Your password</mx:text>
					</mx:TextInput>	
				</mx:HBox>
				<mx:RadioButton label="User" selected="true" click="passwordBox.visible = true"/>
				<mx:RadioButton label="Guest" click="passwordBox.visible = false"/>
			</mx:HBox>
		</mx:VBox>
	</mx:TitleWindow>
	<!--
	This is set up for external use
	-->
	<fx:Declarations>
		<rtc:RoomSettings id="myRoomSettings" roomBandwidth="auto" autoPromote="true" guestsMustKnock="false"/>
		<rtc:AdobeHSAuthenticator id="auth" />
	</fx:Declarations>
	
	<mx:Panel id="panel" title="{applicationTitle}" width="100%" height="100%" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5">
		<rtc:ConnectSessionContainer backgroundAlpha="0.0" id="cSession" authenticator="{auth}" width="100%" autoLogin="false"
									 height="100%" initialRoomSettings="{myRoomSettings}" >
			<mx:Canvas width="100%" height="100%">
				<rtc:ScreenSharePublisher id="sspublisher" playerVersion="10"/>
				<mx:VBox width="100%" height="100%" horizontalAlign="center">
					<mx:VBox width="50%" height="50%" horizontalAlign="center" verticalAlign="middle">
						<mx:Label text="Stream ID:"/><mx:TextInput id="streamid" text=""/>
						<mx:Label text="Publisher User ID:"/><mx:TextInput id="publisherid" text=""/>
					</mx:VBox>
					<mx:HBox width="50%" height="50%" horizontalAlign="center" verticalAlign="middle">
						<mx:Button id="startss_bt" label="Start Screen Sharing" click="startSS()"/>
						<mx:Button id="pause_bt" label="Pause Screen Sharing" click="pauseSS()" enabled="false"/>
						<mx:Button id="stopss_bt" label="Stop Screen Sharing" click="stopSS()" enabled="false"/>
					</mx:HBox>
				</mx:VBox>
			</mx:Canvas>
		</rtc:ConnectSessionContainer>
	</mx:Panel>	
</mx:Application>
